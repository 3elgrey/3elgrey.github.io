name: Docker Deploy

on:
  workflow_run:
    workflows: ["Docker Build & Push"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    environment:
      name: staging
      url: http://staging.portfolio.local
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üîß This would typically SSH to staging server and run:"
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "   docker-compose -f docker-compose.staging.yml up -d"
        echo "‚úÖ Staging deployment completed"

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.workflow_run.conclusion == 'success'
    environment:
      name: production
      url: https://3elgrey.github.io
    
    steps:
    - name: Checkout deployment scripts
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "üì¶ Pulling latest image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        echo "üîß Starting production deployment..."
        # In a real scenario, this would deploy to your production infrastructure
        # For now, we'll simulate the deployment
        echo "   docker run -d -p 80:80 --name portfolio-prod ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "‚úÖ Production deployment completed"
    
    - name: Health check
      run: |
        echo "üîç Performing health check..."
        # Simulate health check
        sleep 5
        echo "‚úÖ Health check passed - application is running"
    
    - name: Send deployment success notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üöÄ Docker Deployment Successful - Portfolio Live in Production"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
        html_body: |
          <h2>üöÄ Docker Deployment Successful</h2>
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Environment:</strong> Production</p>
          <p><strong>Image:</strong> ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest</p>
          <p><strong>Deployed by:</strong> ${{ github.actor }}</p>
          
          <h3>üåê Live URLs:</h3>
          <ul>
            <li><strong>Production:</strong> <a href="https://3elgrey.github.io">https://3elgrey.github.io</a></li>
            <li><strong>Container Registry:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }}">View Images</a></li>
          </ul>
          
          <h3>üîó Links:</h3>
          <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Deployment Run</a></p>
          
          <h3>üê≥ Docker Commands:</h3>
          <pre><code># Pull and run locally
docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
docker run -p 3000:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

# Or use docker-compose
docker-compose up -d</code></pre>
          
          <p><em>üéâ Your containerized portfolio is now live in production!</em></p>

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure()
    environment:
      name: production
    
    steps:
    - name: Rollback to previous version
      run: |
        echo "‚ö†Ô∏è Deployment failed, initiating rollback..."
        echo "üîÑ Rolling back to previous stable version..."
        # In a real scenario, this would rollback to the previous image tag
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"
        echo "   docker-compose -f docker-compose.prod.yml up -d"
        echo "‚úÖ Rollback completed"
    
    - name: Send rollback notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚ö†Ô∏è Docker Deployment Failed - Rollback Initiated"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
        html_body: |
          <h2>‚ö†Ô∏è Deployment Failed - Rollback Completed</h2>
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Environment:</strong> Production</p>
          <p><strong>Failed Image:</strong> ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest</p>
          
          <h3>üîÑ Rollback Details:</h3>
          <p>The deployment failed and has been automatically rolled back to the previous stable version.</p>
          
          <h3>üîó Links:</h3>
          <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Failed Deployment</a></p>
          
          <p><em>‚ö†Ô∏è Please check the deployment logs and fix any issues before the next deployment.</em></p>
